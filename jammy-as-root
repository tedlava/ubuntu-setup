#!/usr/bin/bash


release_name=$(echo $0 | cut -d'-' -f1 | cut -d'/' -f2)


if [ -z "$home" ] || [ $(id -u) -ne 0 ]; then
	echo
	echo "Please do not run this script by itself.  Run \"$release_name-setup.sh\" instead."
	exit
fi


script_rel_dir=$(dirname "${BASH_SOURCE[0]}")
cd $script_rel_dir
script_dir=$(pwd)


# Load variables from config file
if [ -f "$home/Setup/$release_name-config" ]; then
	source $home/Setup/$release_name-config
else
	source $script_dir/$release_name-config
fi


function confirm_cmd {
	local cmd="$*"
	if [ -n "$interactive" ]; then
		echo -e "\nAbout to execute command as root...\n    # $cmd"
		read -p 'Proceed? [Y/n] '
		if [ -z "$REPLY" ] || [ "${REPLY,}" == 'y' ]; then
			eval $cmd
		fi
	else
		echo -e "\nExecuting command as root...\n    # $cmd\n"
		eval $cmd
	fi
}


function contains {
	local -n array=$1
	for i in "${array[@]}"; do
		if [ "$i" == "$2" ]; then
			echo $i
		fi
	done
}


if [ ! -f "$status_dir/drivers_installed" ]; then
	# Install basic utilities
	echo
	echo 'Installing git, curl, and timeshift...'
	confirm_cmd 'apt-get update && apt-get -y install git curl timeshift'
	echo


	# Inform user to take a snapshot with Timeshift, must use GUI
	echo
	echo 'Timeshift must be set up through the GUI before system snapshots can'
	echo 'be taken to rollback a bad update or configuration or installation'
	echo 'of a bad package.  Check the boxes to add monthly and weekly snapshots.'
	echo 'Including @home in snapshots is fine since it has its own subvolume.'
	echo "Take an initial snapshot, comment it with \"Ubuntu (${release_name}) installed\","
	echo 'just in case you screw something up in the rest of the installation... ;)'
	echo 'After it is done snapshotting the system, please close the timeshift window.'
	echo
	read -p 'Press ENTER to open timeshift...'
	confirm_cmd 'timeshift-launcher'
	echo


	# SSD
	if [ -n "$ssd" ]; then
		echo
		echo 'SSD setup...'
		confirm_cmd 'fstrim -v /'
		confirm_cmd 'fstrim -v /home'
		confirm_cmd 'echo -e "\\n#Swappiness\\nvm.swappiness=1\\n" >> /etc/sysctl.conf'
	fi
	echo


	# Purge unwanted packages
	if [ -n "${apt_purges[*]}" ]; then
		echo
		echo 'Removing unwanted packages from the base installation...'
		confirm_cmd "apt-get -y purge ${apt_purges[@]}"
		confirm_cmd 'apt-get -y autopurge'
		echo
	fi


	# Purge and disable snap
	if [ -n "${snap_purges[*]}" ]; then
		echo
		echo 'Removing snap packages and preventing reinstallation of snapd...'
		confirm_cmd 'systemctl disable snapd.service'
		confirm_cmd 'systemctl disable snapd.socket'
		confirm_cmd 'systemctl disable snapd.seeded.service'
		# Remove "extra" snaps (possibly installed by the user)
		snaps=($(snap list | awk '{print $1}' | tail -n $(($(snap list | wc -l) - 1))))
		for snap in "${snaps[@]}"; do
			if [ -z "$(contains snap_purges $snap)" ]; then
				confirm_cmd "snap remove --purge $snap"
			fi
		done
		# Remove system-installed snaps
		for snap in "${snap_purges[@]}"; do
			confirm_cmd "snap remove --purge $snap"
		done
		confirm_cmd 'apt-get -y purge snapd'
		confirm_cmd "rm -rf /var/cache/snapd/ $home/snap" # What about /snap and /var/snap ???
		confirm_cmd 'echo -e "Package: snapd\\nPin: release a=*\\nPin-Priority: -10" > /etc/apt/preferences.d/nosnap.pref'
		confirm_cmd 'echo -e "Package: firefox*\\nPin: release o=Ubuntu*\\nPin-Priority: -1" > /etc/apt/preferences.d/firefox-no-snap.pref'
	fi


	# Adding PPAs
	if [ -n "${ppas[*]}" ]; then
		echo
		echo 'Adding PPAs...'
		for ppa in "${ppas[@]}"; do
			confirm_cmd "add-apt-repository $ppa"
		done
	fi


	# Update/upgrade packages
	echo
	echo 'Updating apt cache and upgrading current packages...'
	confirm_cmd 'apt-get update'
	confirm_cmd 'apt-get -y upgrade'
	echo


	# Change Plymouth boot logo
	if [ -n "$boot_logo" ]; then
		echo
		echo 'Change boot up logos...'
		confirm_cmd 'mv /usr/share/plymouth/ubuntu-logo.png /usr/share/plymouth/ubuntu-logo.png.bak # Backup original Ubuntu logo'
		confirm_cmd "cp -av $script_dir/$boot_logo /usr/share/plymouth/ubuntu-logo.png"
		confirm_cmd 'mv /usr/share/plymouth/themes/spinner/watermark.png /usr/share/plymouth/themes/spinner/watermark.png.bak # Backup original Ubuntu logo'
		confirm_cmd "cp -av $script_dir/$boot_logo /usr/share/plymouth/themes/spinner/watermark.png"
		echo
	fi


	# Install vanilla Gnome
	echo
	echo 'Installing vanilla/stock Gnome...'
	confirm_cmd 'apt-get -y install vanilla-gnome-desktop dbus-x11'
	echo


	# Startup driver manager to install firmware and other drivers (such as NVIDIA)
	echo
	echo 'Please install any recommended firmware and drivers in the Driver Manager...'
	echo
	read -p 'Press ENTER to open Software & Updates -> Additional Drivers...'
	sudo -u $SUDO_USER touch "$status_dir/drivers_installed"
	confirm_cmd 'software-properties-gtk --open-tab=4'


	echo
	echo 'The script needs to reboot your system.  When it is finished rebooting,'
	echo 'please re-run the same script and it will resume from where it left off.'
	echo
	if [ "$gdmsession" != 'gnome' ] && [ "$gdmsession" != 'gnome-xorg' ]; then
		echo '    *** Please switch to "Gnome" or "Gnome on Xorg" when you login next time!'
		echo
	fi
	read -p 'Press ENTER to reboot...'
	systemctl reboot
	sleep 5
fi


# Make sure user is in a Gnome session instead of an Ubuntu session
if [ "$gdmsession" != 'gnome' ] && [ "$gdmsession" != 'gnome-xorg' ]; then
	echo
	echo 'The next section requires you to switch to the vanilla Gnome desktop,'
	echo 'NOT the customized Ubuntu desktop.  Please logout, click on your name,'
	echo 'then click on the gear icon (bottom right corner) to change the desktop'
	echo 'session that you will log into.'
	echo
	echo '    *** Please switch to "Gnome" or "Gnome on Xorg" when you login next time!'
	echo
	echo 'When you log back in, please re-run the script to continue from here...'
	echo
	exit
fi


# Inhibit suspend if on AC power but not logged in
if [ -n "$gdm_inhibit_ac" ]; then
	echo
	echo 'Setting up gdm to stay on when plugged in, but not logged in.'
	echo 'Will still auto-suspend if on battery power...'
	confirm_cmd "sudo -u gdm dbus-launch gsettings set org.gnome.settings-daemon.plugins.power sleep-inactive-ac-type 'nothing'"
	echo
fi


# Install Windscribe VPN
if [ -n "$install_windscribe" ]; then
	echo
	echo 'Installing Windscribe VPN...'
	confirm_cmd "sudo -u $SUDO_USER curl -L https://windscribe.com/install/desktop/linux_deb_x64/beta -o $script_dir/downloads/windscribe.deb"
	confirm_cmd "apt-get -y install $script_dir/downloads/windscribe.deb"
	echo
fi


# Install apt_installs
if [ -n "${apt_installs[*]}" ]; then
	echo
	echo 'Installing apt packages...'
	confirm_cmd "apt-get -y install ${apt_installs[@]}"
	echo
fi


# DVD
if [ -n "$(contains apt_installs libdvd-pkg)" ]; then
	echo
	echo 'Setting up packages to watch DVD movies...'
	confirm_cmd 'dpkg-reconfigure libdvd-pkg'
	echo
fi


# Check if there are extra kernel parameters needed for grub that need to be loaded
if [ "$GRUB_CMDLINE_LINUX_DEFAULT" != 'quiet splash' ]; then
	echo
	echo 'Setting up grub...'
	confirm_cmd "sed -i 's/GRUB_CMDLINE_LINUX_DEFAULT.*/GRUB_CMDLINE_LINUX_DEFAULT=\"$GRUB_CMDLINE_LINUX_DEFAULT\"/' /etc/default/grub"
	confirm_cmd 'update-grub'
	echo
fi


# Install other system utilities
if [ -n "$(contains apt_installs flatpak)" ]; then
	echo
	echo 'Adding flathub repo...'
	confirm_cmd 'flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo'
	echo
fi


# Inform user to turn on firewall with Gufw, must use GUI
if [ -n "$(contains apt_installs gufw)" ]; then
	echo
	echo 'Gufw (Graphical Uncomplicated Firewall) also needs to be set up through'
	echo 'its GUI.  In the Home profile, add a rule to allow all incoming requests'
	echo 'through SSH.  Make sure the firewall is turned on before closing the window.'
	echo
	read -p 'Press ENTER to open gufw...'
	confirm_cmd 'gufw'
	echo
fi


# Create timeshift snapshot after installing vanilla Gnome
confirm_cmd "timeshift --create --comments 'Ubuntu GNOME (${release_name}) installed' --yes"


# Add private window to context menu for Firefox-ESR launcher
# if [ -n "$priv_firefox_launcher" ]; then
# 	echo
# 	echo 'Adding private window to context menu for Firefox-ESR launcher...'
# 	confirm_cmd 'echo -e "Actions=new-window;new-private-window;\\n\\n[Desktop Action new-window]\\nName=Open a New Window\\nExec=/usr/lib/firefox-esr/firefox-esr -new-window\\n\\n[Desktop Action new-private-window]\\nName=Open a New Private Window\\nExec=/usr/lib/firefox-esr/firefox-esr -private-window\\n" >> /usr/share/applications/firefox-esr.desktop'
# 	echo
# fi

